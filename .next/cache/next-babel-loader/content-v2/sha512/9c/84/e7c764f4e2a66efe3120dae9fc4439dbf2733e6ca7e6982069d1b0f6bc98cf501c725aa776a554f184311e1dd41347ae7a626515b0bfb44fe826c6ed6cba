{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useUser = () => {\n  const authContext = useContext(AuthContext);\n  return authContext.user;\n};\nexport const useSetUser = () => {\n  const authContext = useContext(AuthContext);\n  return authContext.setUser;\n};\nexport const useLoggedInOrRiderect = () => {\n  const user = useUser();\n  const router = useRouter();\n  useEffect(() => {\n    if (user === null) {\n      router.replace(`/login/?next=${router.asPath}`);\n    }\n  }, [user]);\n  return user !== null;\n};\n\nconst AuthProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    user: undefined\n  });\n  const setUser = useCallback(user => {\n    setState({\n      user\n    });\n  }, []);\n  const value = useMemo(() => _objectSpread(_objectSpread({}, state), {}, {\n    setUser\n  }), [state]);\n  useEffect(() => {\n    axios.get(\"/api/session/\").then(function (response) {\n      setState({\n        user: response.data\n      });\n    }).catch(function () {\n      setState({\n        user: null\n      });\n    });\n  }, []);\n\n  if (state.user === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: value,\n    children: children\n  });\n};\n\nexport default AuthProvider;","map":null,"metadata":{},"sourceType":"module"}